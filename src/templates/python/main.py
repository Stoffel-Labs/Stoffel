#!/usr/bin/env python3
"""
{{package_name}} - {{package_description}}
Generated by Stoffel CLI

This example demonstrates secure multi-party computation using the Stoffel Python SDK.
Protocol: {{mpc_protocol}}, Parties: {{mpc_parties}}, Field: {{mpc_field}}
"""

import asyncio
from stoffel import StoffelProgram, StoffelClient


async def main():
    """
    Example: Secure addition using MPC

    This demonstrates how to:
    1. Set up a Stoffel program for MPC computation
    2. Connect to MPC nodes
    3. Execute secure computation with private inputs
    4. Reconstruct the final result
    """
    print("=== Stoffel MPC Demo ===\n")

    # 1. Program Setup - compile StoffelLang to bytecode
    print("1. Setting up Stoffel program...")
    program = StoffelProgram("src/secure_computation.stfl")
    program.compile()
    program.set_execution_params({
        "computation_id": "secure_addition",
        "function_name": "main",
        "expected_inputs": ["secret_a", "secret_b", "threshold"]
    })
    print("   âœ“ Program compiled and configured")

    # 2. MPC Network Client - connect to HoneyBadger network
    print("\n2. Connecting to MPC network...")
    client = StoffelClient({
        "nodes": [
            "http://localhost:9001",  # Party 1
            "http://localhost:9002",  # Party 2
            "http://localhost:9003",  # Party 3
            "http://localhost:9004",  # Party 4
            "http://localhost:9005",  # Party 5
        ],
        "client_id": "{{package_name_underscore}}",
        "program_id": "secure_addition_demo"
    })
    print("   âœ“ Connected to {{mpc_parties}} MPC parties")

    # 3. Execute secure computation
    print("\n3. Executing secure computation...")

    # Execute with explicit secret/public input separation
    result = await client.execute_with_inputs(
        secret_inputs={
            "secret_a": 42,      # This will be secret-shared across all parties
            "secret_b": 25       # This will be secret-shared across all parties
        },
        public_inputs={
            "threshold": 50      # This is visible to all parties
        }
    )

    print(f"   ðŸ”’ Secret inputs processed via MPC")
    print(f"   ðŸ“Š Computation result: {result}")

    # 4. Alternative: simpler one-call execution
    print("\n4. Alternative simple execution...")
    result2 = await client.execute_with_inputs(
        secret_inputs={"value_x": 100, "value_y": 37}
    )
    print(f"   ðŸ“Š Simple computation result: {result2}")

    # 5. Connection status and cleanup
    status = client.get_connection_status()
    print(f"\n5. Network status:")
    print(f"   Connected to {status['mpc_nodes_count']} nodes")
    print(f"   Protocol: HoneyBadger MPC")
    print(f"   Field: {{mpc_field}}")

    await client.disconnect()
    print("   âœ“ Disconnected from MPC network")

    print("\n=== Demo Complete ===")


async def healthcare_example():
    """
    Example: Privacy-preserving healthcare analytics

    Demonstrates computing statistics over private patient data
    without revealing individual records.
    """
    print("\n=== Healthcare Privacy Example ===")

    client = StoffelClient({
        "nodes": ["http://localhost:9001", "http://localhost:9002", "http://localhost:9003",
                 "http://localhost:9004", "http://localhost:9005"],
        "client_id": "healthcare_client",
        "program_id": "patient_analytics"
    })

    # Each hospital contributes private patient data
    result = await client.execute_with_inputs(
        secret_inputs={
            "patient_ages": [25, 34, 45, 67, 23, 56],     # Private patient ages
            "has_condition": [0, 1, 0, 1, 0, 1]          # Private condition flags
        },
        public_inputs={
            "analysis_type": "prevalence_study"           # Public analysis parameters
        }
    )

    print(f"   ðŸ“ˆ Population statistics (privacy-preserving): {result}")
    await client.disconnect()


if __name__ == "__main__":
    # Run the main MPC demonstration
    asyncio.run(main())

    # Run additional healthcare example
    asyncio.run(healthcare_example())